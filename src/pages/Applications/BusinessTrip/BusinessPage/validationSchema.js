import * as Yup from "yup"

const today = new Date()
today.setHours(0, 0, 0, 0)

export const businessSchema = Yup.object().shape({
  trip_type: Yup.string()
    .required("მივლინების ტიპი სავალდებულოა.")
    .oneOf(
      ["regional", "international"],
      "გთხოვთ, აირჩიოთ სწორი ავტომობილის ტიპი."
    ),
  employee_name: Yup.string()
    .required("თანამშრომლის სახელი სავალდებულოა.")
    .matches(
      /^[ა-ჰ\s]+$/,
      "თანამშრომლის სახელი უნდა შეიცავდეს მხოლოდ ქართული ასოებს."
    )
    .min(2, "თანამშრომლის სახელი უნდა იყოს მინიმუმ 2 სიმბოლო.")
    .max(50, "თანამშრომლის სახელი არ უნდა აღემატებოდეს 50 სიმბოლოს."),
  department: Yup.string()
    .required("დეპარტამენტი სავალდებულოა.")
    .min(2, "დეპარტამენტის სახელი უნდა იყოს მინიმუმ 2 სიმბოლო.")
    .max(100, "დეპარტამენტის სახელი არ უნდა აღემატებოდეს 100 სიმბოლოს."),
  position: Yup.string()
    .required("პოზიცია სავალდებულოა.")
    .min(2, "პოზიციის სახელი უნდა იყოს მინიმუმ 2 სიმბოლო.")
    .max(100, "პოზიციის სახელი არ უნდა აღემატებოდეს 100 სიმბოლოს."),
  substitute_name: Yup.string()
    .required("შემცვლელი თანამშრომლის სახელი სავალდებულოა.")
    .matches(
      /^[ა-ჰ\s]+$/,
      "შემცვლელის სახელი უნდა შეიცავდეს მხოლოდ ქართული ასოებს."
    )
    .min(2, "შემცვლელის სახელი უნდა იქოს მინიმუმ 2 სიმბოლო.")
    .max(50, "შემცვლელის სახელი არ უნდა აღემატებოდეს 50 სიმბოლოს.")
    .notOneOf(
      [Yup.ref("employee_name")],
      "შემცვლელი ვერ იქნება იგივე, რასაც თანამშრომელი."
    ),
  substitute_department: Yup.string()
    .required("შემცვლელის დეპარტამენტი სავალდებულოა.")
    .min(2, "შემცვლელის დეპარტამენტის სახელი უნდა იყოს მინიმუმ 2 სიმბოლო.")
    .max(
      100,
      "შემცვლელის დეპარტამენტის სახელი არ უნდა აღემატებოდეს 100 სიმბოლოს."
    ),
  substitute_position: Yup.string()
    .required("შემცვლელის პოზიცია სავალდებულოა.")
    .min(2, "შემცვლელის პოზიციის სახელი უნდა იყოს მინიმუმ 2 სიმბოლო.")
    .max(100, "შემცვლელის პოზიციის სახელი არ უნდა აღემატებოდე�� 100 სიმბოლოს."),
  start_date: Yup.date()
    .required("დაწყების თარიღი სავალდებულოა.")
    .min(today, "დაწყების თარიღი ვერ იქნება წარსულში.")
    .max(
      new Date(today.getFullYear() + 1, today.getMonth(), today.getDate()),
      "დაწყების თარიღი ვერ იქნება დღიდან ერთ წელზე მეტი."
    ),
  end_date: Yup.date()
    .required("დასრულების თარიღი სავალდებულოა.")
    .min(
      Yup.ref("start_date"),
      "დასრულების თარიღი უნდა იყოს დაწყების თარიღის შემდეგ ან ტოლი."
    ),
  purpose: Yup.string()
    .required("მიზანი სავალდებულოა.")
    .min(2, "მიზანი უნდა იყოს მინიმუმ 2 სიმბოლო.")
    .max(253, "მიზანი არ უნდა აღემატებოდეს 253 სიმბოლოს."),
  departure_location: Yup.string()
    .required("გასვლის ადგილი სავალდებულოა.")
    .min(2, "გა��ვლის ადგილი უნდა იყოს მინიმუმ 2 სიმბოლო.")
    .max(100, "გასვლის ადგილი არ უნდა აღემატებოდეს 100 სიმბოლოს."),
  arrival_location: Yup.string()
    .required("ჩასვლის ადგილი სავალდებულოა.")
    .min(2, "ჩასვლის ადგილი უნდა იყოს მინიმუმ 2 სიმბოლო.")
    .max(100, "ჩასვლის ადგილი არ უნდა აღემატებოდეს 100 სიმბოლოს."),
  duration_days: Yup.number()
    .required("სამუშაო დღეების რაოდენობა სავალდებულოა.")
    .min(1, "სამუშაო დღეების რაოდენობა უნდა იყოს მინიმუმ 1 დღე.")
    .max(365, "სამუშაო დღეების რაოდენობა არ უნდა აღემატებოდეს 365 დღეს."),
  accommodation_cost: Yup.number()
    .required("სასტუმროს ღირებულება სავალდებულოა.")
    .min(0, "სასტუმროს ღირებულება უნდა იყოს მინიმუმ 0 ლარი."),
  transportation_cost: Yup.number()
    .required("მოგზაურობის ღირებულება სავალდებულოა.")
    .min(0, "მოგზაურობის ღირებულება უნდა იყოს მინიმუმ 0 ლარი."),
  food_cost: Yup.number()
    .required("საკვების ღირებულება სავალდებულოა.")
    .min(0, "საკვების ღირებულება უნდა იყოს მინიმუმ 0 ლარი."),
  vehicle_expense: Yup.boolean().required(
    "ტრანსპორტის მითითება სავალდებულოა."
  ),
  vehicle_model: Yup.string(),
  vehicle_plate: Yup.string(),
  fuel_cost: Yup.number(),
  final_cost: Yup.number()
    .required("საბოლოო ღირებულება სავალდებულოა.")
    .min(0, "საბოლოო ღირებულება უნდა იყოს მინიმუმ 0 ლარი."),
})
